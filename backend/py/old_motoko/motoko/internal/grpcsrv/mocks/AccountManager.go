// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import acctmgr "github.com/danjenson/motoko/motoko/internal/acctmgr"
import mock "github.com/stretchr/testify/mock"
import time "time"

// AccountManager is an autogenerated mock type for the AccountManager type
type AccountManager struct {
	mock.Mock
}

// ActivateAPIKey provides a mock function with given fields: email, apiKey
func (_m *AccountManager) ActivateAPIKey(email string, apiKey acctmgr.APIKey) error {
	ret := _m.Called(email, apiKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, acctmgr.APIKey) error); ok {
		r0 = rf(email, apiKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeactivateAPIKey provides a mock function with given fields: email, apiKey
func (_m *AccountManager) DeactivateAPIKey(email string, apiKey acctmgr.APIKey) error {
	ret := _m.Called(email, apiKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, acctmgr.APIKey) error); ok {
		r0 = rf(email, apiKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DefaultAPIKey provides a mock function with given fields: email
func (_m *AccountManager) DefaultAPIKey(email string) (acctmgr.APIKey, error) {
	ret := _m.Called(email)

	var r0 acctmgr.APIKey
	if rf, ok := ret.Get(0).(func(string) acctmgr.APIKey); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(acctmgr.APIKey)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasAccount provides a mock function with given fields: email
func (_m *AccountManager) HasAccount(email string) (bool, error) {
	ret := _m.Called(email)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsActiveAPIKey provides a mock function with given fields: email, apiKey
func (_m *AccountManager) IsActiveAPIKey(email string, apiKey acctmgr.APIKey) (bool, error) {
	ret := _m.Called(email, apiKey)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, acctmgr.APIKey) bool); ok {
		r0 = rf(email, apiKey)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, acctmgr.APIKey) error); ok {
		r1 = rf(email, apiKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAPIKeys provides a mock function with given fields: email
func (_m *AccountManager) ListAPIKeys(email string) ([]acctmgr.APIKeyRecord, error) {
	ret := _m.Called(email)

	var r0 []acctmgr.APIKeyRecord
	if rf, ok := ret.Get(0).(func(string) []acctmgr.APIKeyRecord); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]acctmgr.APIKeyRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAPIKey provides a mock function with given fields: email, name
func (_m *AccountManager) NewAPIKey(email string, name string) (acctmgr.APIKey, error) {
	ret := _m.Called(email, name)

	var r0 acctmgr.APIKey
	if rf, ok := ret.Get(0).(func(string, string) acctmgr.APIKey); ok {
		r0 = rf(email, name)
	} else {
		r0 = ret.Get(0).(acctmgr.APIKey)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccount provides a mock function with given fields: email, name
func (_m *AccountManager) NewAccount(email string, name string) (acctmgr.APIKey, error) {
	ret := _m.Called(email, name)

	var r0 acctmgr.APIKey
	if rf, ok := ret.Get(0).(func(string, string) acctmgr.APIKey); ok {
		r0 = rf(email, name)
	} else {
		r0 = ret.Get(0).(acctmgr.APIKey)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterAPICall provides a mock function with given fields: apiKey, learnKey, serviceType, nBytes
func (_m *AccountManager) RegisterAPICall(apiKey acctmgr.APIKey, learnKey string, serviceType acctmgr.ServiceType, nBytes uint64) error {
	ret := _m.Called(apiKey, learnKey, serviceType, nBytes)

	var r0 error
	if rf, ok := ret.Get(0).(func(acctmgr.APIKey, string, acctmgr.ServiceType, uint64) error); ok {
		r0 = rf(apiKey, learnKey, serviceType, nBytes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Use provides a mock function with given fields: email, start, end
func (_m *AccountManager) Use(email string, start time.Time, end time.Time) (acctmgr.Usage, error) {
	ret := _m.Called(email, start, end)

	var r0 acctmgr.Usage
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) acctmgr.Usage); ok {
		r0 = rf(email, start, end)
	} else {
		r0 = ret.Get(0).(acctmgr.Usage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time) error); ok {
		r1 = rf(email, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
