/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var enums_pb = require('./enums_pb.js');
goog.exportSymbol('proto.pb.Attribute', null, global);
goog.exportSymbol('proto.pb.InferRequest', null, global);
goog.exportSymbol('proto.pb.InferRequest.Parameters', null, global);
goog.exportSymbol('proto.pb.InferResponse', null, global);
goog.exportSymbol('proto.pb.LearnRequest', null, global);
goog.exportSymbol('proto.pb.LearnResponse', null, global);
goog.exportSymbol('proto.pb.Metadata', null, global);
goog.exportSymbol('proto.pb.PredictRequest', null, global);
goog.exportSymbol('proto.pb.PredictResponse', null, global);
goog.exportSymbol('proto.pb.Replacement', null, global);
goog.exportSymbol('proto.pb.Replacement.From', null, global);
goog.exportSymbol('proto.pb.Replacement.To', null, global);
goog.exportSymbol('proto.pb.TypedDatum', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Attribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Attribute.repeatedFields_, null);
};
goog.inherits(proto.pb.Attribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.Attribute.displayName = 'proto.pb.Attribute';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Attribute.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Attribute.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Attribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Attribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Attribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    behaviorType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dataType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    replacementsList: jspb.Message.toObjectList(msg.getReplacementsList(),
    proto.pb.Replacement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Attribute}
 */
proto.pb.Attribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Attribute;
  return proto.pb.Attribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Attribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Attribute}
 */
proto.pb.Attribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.BehaviorType} */ (reader.readEnum());
      msg.setBehaviorType(value);
      break;
    case 3:
      var value = /** @type {!proto.pb.DataType} */ (reader.readEnum());
      msg.setDataType(value);
      break;
    case 4:
      var value = new proto.pb.Replacement;
      reader.readMessage(value,proto.pb.Replacement.deserializeBinaryFromReader);
      msg.addReplacements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Attribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Attribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Attribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Attribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBehaviorType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDataType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getReplacementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.pb.Replacement.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pb.Attribute.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pb.Attribute.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional BehaviorType behavior_type = 2;
 * @return {!proto.pb.BehaviorType}
 */
proto.pb.Attribute.prototype.getBehaviorType = function() {
  return /** @type {!proto.pb.BehaviorType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.pb.BehaviorType} value */
proto.pb.Attribute.prototype.setBehaviorType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional DataType data_type = 3;
 * @return {!proto.pb.DataType}
 */
proto.pb.Attribute.prototype.getDataType = function() {
  return /** @type {!proto.pb.DataType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.pb.DataType} value */
proto.pb.Attribute.prototype.setDataType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated Replacement replacements = 4;
 * @return {!Array.<!proto.pb.Replacement>}
 */
proto.pb.Attribute.prototype.getReplacementsList = function() {
  return /** @type{!Array.<!proto.pb.Replacement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Replacement, 4));
};


/** @param {!Array.<!proto.pb.Replacement>} value */
proto.pb.Attribute.prototype.setReplacementsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.pb.Replacement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Replacement}
 */
proto.pb.Attribute.prototype.addReplacements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pb.Replacement, opt_index);
};


proto.pb.Attribute.prototype.clearReplacementsList = function() {
  this.setReplacementsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.InferRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pb.InferRequest.oneofGroups_);
};
goog.inherits(proto.pb.InferRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.InferRequest.displayName = 'proto.pb.InferRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pb.InferRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.pb.InferRequest.ValueCase = {
  VALUE_NOT_SET: 0,
  PARAMETERS: 1,
  DATA: 2
};

/**
 * @return {proto.pb.InferRequest.ValueCase}
 */
proto.pb.InferRequest.prototype.getValueCase = function() {
  return /** @type {proto.pb.InferRequest.ValueCase} */(jspb.Message.computeOneofCase(this, proto.pb.InferRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.InferRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.InferRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.InferRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.InferRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    parameters: (f = msg.getParameters()) && proto.pb.InferRequest.Parameters.toObject(includeInstance, f),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.InferRequest}
 */
proto.pb.InferRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.InferRequest;
  return proto.pb.InferRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.InferRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.InferRequest}
 */
proto.pb.InferRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.InferRequest.Parameters;
      reader.readMessage(value,proto.pb.InferRequest.Parameters.deserializeBinaryFromReader);
      msg.setParameters(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.InferRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.InferRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.InferRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.InferRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParameters();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.InferRequest.Parameters.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.InferRequest.Parameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.InferRequest.Parameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.InferRequest.Parameters.displayName = 'proto.pb.InferRequest.Parameters';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.InferRequest.Parameters.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.InferRequest.Parameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.InferRequest.Parameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.InferRequest.Parameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    numericErrorThreshold: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    nMaxCategories: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.InferRequest.Parameters}
 */
proto.pb.InferRequest.Parameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.InferRequest.Parameters;
  return proto.pb.InferRequest.Parameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.InferRequest.Parameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.InferRequest.Parameters}
 */
proto.pb.InferRequest.Parameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNumericErrorThreshold(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNMaxCategories(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.InferRequest.Parameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.InferRequest.Parameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.InferRequest.Parameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.InferRequest.Parameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumericErrorThreshold();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getNMaxCategories();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional float numeric_error_threshold = 1;
 * @return {number}
 */
proto.pb.InferRequest.Parameters.prototype.getNumericErrorThreshold = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.pb.InferRequest.Parameters.prototype.setNumericErrorThreshold = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional int32 n_max_categories = 2;
 * @return {number}
 */
proto.pb.InferRequest.Parameters.prototype.getNMaxCategories = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.InferRequest.Parameters.prototype.setNMaxCategories = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Parameters parameters = 1;
 * @return {?proto.pb.InferRequest.Parameters}
 */
proto.pb.InferRequest.prototype.getParameters = function() {
  return /** @type{?proto.pb.InferRequest.Parameters} */ (
    jspb.Message.getWrapperField(this, proto.pb.InferRequest.Parameters, 1));
};


/** @param {?proto.pb.InferRequest.Parameters|undefined} value */
proto.pb.InferRequest.prototype.setParameters = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pb.InferRequest.oneofGroups_[0], value);
};


proto.pb.InferRequest.prototype.clearParameters = function() {
  this.setParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.InferRequest.prototype.hasParameters = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.pb.InferRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.pb.InferRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.pb.InferRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.InferRequest.prototype.setData = function(value) {
  jspb.Message.setOneofField(this, 2, proto.pb.InferRequest.oneofGroups_[0], value);
};


proto.pb.InferRequest.prototype.clearData = function() {
  jspb.Message.setOneofField(this, 2, proto.pb.InferRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.InferRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.InferResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.InferResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.InferResponse.displayName = 'proto.pb.InferResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.InferResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.InferResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.InferResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.InferResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.pb.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.InferResponse}
 */
proto.pb.InferResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.InferResponse;
  return proto.pb.InferResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.InferResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.InferResponse}
 */
proto.pb.InferResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Metadata;
      reader.readMessage(value,proto.pb.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.InferResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.InferResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.InferResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.InferResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional Metadata metadata = 1;
 * @return {?proto.pb.Metadata}
 */
proto.pb.InferResponse.prototype.getMetadata = function() {
  return /** @type{?proto.pb.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.pb.Metadata, 1));
};


/** @param {?proto.pb.Metadata|undefined} value */
proto.pb.InferResponse.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.pb.InferResponse.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.InferResponse.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.LearnRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pb.LearnRequest.oneofGroups_);
};
goog.inherits(proto.pb.LearnRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.LearnRequest.displayName = 'proto.pb.LearnRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pb.LearnRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.pb.LearnRequest.ValueCase = {
  VALUE_NOT_SET: 0,
  METADATA: 1,
  DATA: 2
};

/**
 * @return {proto.pb.LearnRequest.ValueCase}
 */
proto.pb.LearnRequest.prototype.getValueCase = function() {
  return /** @type {proto.pb.LearnRequest.ValueCase} */(jspb.Message.computeOneofCase(this, proto.pb.LearnRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.LearnRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.LearnRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.LearnRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.LearnRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.pb.Metadata.toObject(includeInstance, f),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.LearnRequest}
 */
proto.pb.LearnRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.LearnRequest;
  return proto.pb.LearnRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.LearnRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.LearnRequest}
 */
proto.pb.LearnRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Metadata;
      reader.readMessage(value,proto.pb.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.LearnRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.LearnRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.LearnRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.LearnRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.Metadata.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional Metadata metadata = 1;
 * @return {?proto.pb.Metadata}
 */
proto.pb.LearnRequest.prototype.getMetadata = function() {
  return /** @type{?proto.pb.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.pb.Metadata, 1));
};


/** @param {?proto.pb.Metadata|undefined} value */
proto.pb.LearnRequest.prototype.setMetadata = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.pb.LearnRequest.oneofGroups_[0], value);
};


proto.pb.LearnRequest.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.LearnRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.pb.LearnRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.pb.LearnRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.pb.LearnRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.LearnRequest.prototype.setData = function(value) {
  jspb.Message.setOneofField(this, 2, proto.pb.LearnRequest.oneofGroups_[0], value);
};


proto.pb.LearnRequest.prototype.clearData = function() {
  jspb.Message.setOneofField(this, 2, proto.pb.LearnRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.LearnRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.LearnResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.LearnResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.LearnResponse.displayName = 'proto.pb.LearnResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.LearnResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.LearnResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.LearnResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.LearnResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    learnKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    evaluation: jspb.Message.getFieldWithDefault(msg, 2, ""),
    decisions: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.LearnResponse}
 */
proto.pb.LearnResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.LearnResponse;
  return proto.pb.LearnResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.LearnResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.LearnResponse}
 */
proto.pb.LearnResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLearnKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvaluation(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDecisions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.LearnResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.LearnResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.LearnResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.LearnResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLearnKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEvaluation();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDecisions();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string learn_key = 1;
 * @return {string}
 */
proto.pb.LearnResponse.prototype.getLearnKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pb.LearnResponse.prototype.setLearnKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string evaluation = 2;
 * @return {string}
 */
proto.pb.LearnResponse.prototype.getEvaluation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.LearnResponse.prototype.setEvaluation = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string decisions = 3;
 * @return {string}
 */
proto.pb.LearnResponse.prototype.getDecisions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.LearnResponse.prototype.setDecisions = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Metadata.repeatedFields_, null);
};
goog.inherits(proto.pb.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.Metadata.displayName = 'proto.pb.Metadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Metadata.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    hasTarget: jspb.Message.getFieldWithDefault(msg, 1, false),
    targetName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    proto.pb.Attribute.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Metadata}
 */
proto.pb.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Metadata;
  return proto.pb.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Metadata}
 */
proto.pb.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasTarget(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetName(value);
      break;
    case 3:
      var value = new proto.pb.Attribute;
      reader.readMessage(value,proto.pb.Attribute.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHasTarget();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTargetName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.pb.Attribute.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool has_target = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.Metadata.prototype.getHasTarget = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.pb.Metadata.prototype.setHasTarget = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string target_name = 2;
 * @return {string}
 */
proto.pb.Metadata.prototype.getTargetName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.Metadata.prototype.setTargetName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Attribute attributes = 3;
 * @return {!Array.<!proto.pb.Attribute>}
 */
proto.pb.Metadata.prototype.getAttributesList = function() {
  return /** @type{!Array.<!proto.pb.Attribute>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Attribute, 3));
};


/** @param {!Array.<!proto.pb.Attribute>} value */
proto.pb.Metadata.prototype.setAttributesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pb.Attribute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Attribute}
 */
proto.pb.Metadata.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pb.Attribute, opt_index);
};


proto.pb.Metadata.prototype.clearAttributesList = function() {
  this.setAttributesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.PredictRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pb.PredictRequest.oneofGroups_);
};
goog.inherits(proto.pb.PredictRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.PredictRequest.displayName = 'proto.pb.PredictRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pb.PredictRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.pb.PredictRequest.ValueCase = {
  VALUE_NOT_SET: 0,
  LEARN_KEY: 1,
  DATA: 2
};

/**
 * @return {proto.pb.PredictRequest.ValueCase}
 */
proto.pb.PredictRequest.prototype.getValueCase = function() {
  return /** @type {proto.pb.PredictRequest.ValueCase} */(jspb.Message.computeOneofCase(this, proto.pb.PredictRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.PredictRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.PredictRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.PredictRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PredictRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    learnKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.PredictRequest}
 */
proto.pb.PredictRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.PredictRequest;
  return proto.pb.PredictRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.PredictRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.PredictRequest}
 */
proto.pb.PredictRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLearnKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.PredictRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.PredictRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.PredictRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PredictRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string learn_key = 1;
 * @return {string}
 */
proto.pb.PredictRequest.prototype.getLearnKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pb.PredictRequest.prototype.setLearnKey = function(value) {
  jspb.Message.setOneofField(this, 1, proto.pb.PredictRequest.oneofGroups_[0], value);
};


proto.pb.PredictRequest.prototype.clearLearnKey = function() {
  jspb.Message.setOneofField(this, 1, proto.pb.PredictRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.PredictRequest.prototype.hasLearnKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.pb.PredictRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.pb.PredictRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.pb.PredictRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.PredictRequest.prototype.setData = function(value) {
  jspb.Message.setOneofField(this, 2, proto.pb.PredictRequest.oneofGroups_[0], value);
};


proto.pb.PredictRequest.prototype.clearData = function() {
  jspb.Message.setOneofField(this, 2, proto.pb.PredictRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.PredictRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.PredictResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pb.PredictResponse.oneofGroups_);
};
goog.inherits(proto.pb.PredictResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.PredictResponse.displayName = 'proto.pb.PredictResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pb.PredictResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.pb.PredictResponse.ValueCase = {
  VALUE_NOT_SET: 0,
  PREDICTIONS: 1,
  DECISIONS: 2
};

/**
 * @return {proto.pb.PredictResponse.ValueCase}
 */
proto.pb.PredictResponse.prototype.getValueCase = function() {
  return /** @type {proto.pb.PredictResponse.ValueCase} */(jspb.Message.computeOneofCase(this, proto.pb.PredictResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.PredictResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.PredictResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.PredictResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PredictResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    predictions: jspb.Message.getFieldWithDefault(msg, 1, ""),
    decisions: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.PredictResponse}
 */
proto.pb.PredictResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.PredictResponse;
  return proto.pb.PredictResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.PredictResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.PredictResponse}
 */
proto.pb.PredictResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPredictions(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDecisions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.PredictResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.PredictResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.PredictResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PredictResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string predictions = 1;
 * @return {string}
 */
proto.pb.PredictResponse.prototype.getPredictions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pb.PredictResponse.prototype.setPredictions = function(value) {
  jspb.Message.setOneofField(this, 1, proto.pb.PredictResponse.oneofGroups_[0], value);
};


proto.pb.PredictResponse.prototype.clearPredictions = function() {
  jspb.Message.setOneofField(this, 1, proto.pb.PredictResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.PredictResponse.prototype.hasPredictions = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string decisions = 2;
 * @return {string}
 */
proto.pb.PredictResponse.prototype.getDecisions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.PredictResponse.prototype.setDecisions = function(value) {
  jspb.Message.setOneofField(this, 2, proto.pb.PredictResponse.oneofGroups_[0], value);
};


proto.pb.PredictResponse.prototype.clearDecisions = function() {
  jspb.Message.setOneofField(this, 2, proto.pb.PredictResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.PredictResponse.prototype.hasDecisions = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Replacement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Replacement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.Replacement.displayName = 'proto.pb.Replacement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Replacement.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Replacement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Replacement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Replacement.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = msg.getFrom()) && proto.pb.Replacement.From.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.pb.Replacement.To.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Replacement}
 */
proto.pb.Replacement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Replacement;
  return proto.pb.Replacement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Replacement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Replacement}
 */
proto.pb.Replacement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Replacement.From;
      reader.readMessage(value,proto.pb.Replacement.From.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 2:
      var value = new proto.pb.Replacement.To;
      reader.readMessage(value,proto.pb.Replacement.To.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Replacement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Replacement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Replacement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Replacement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.Replacement.From.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.Replacement.To.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Replacement.From = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pb.Replacement.From.oneofGroups_);
};
goog.inherits(proto.pb.Replacement.From, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.Replacement.From.displayName = 'proto.pb.Replacement.From';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pb.Replacement.From.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.pb.Replacement.From.ValueCase = {
  VALUE_NOT_SET: 0,
  MISSING: 1,
  DATUM: 2
};

/**
 * @return {proto.pb.Replacement.From.ValueCase}
 */
proto.pb.Replacement.From.prototype.getValueCase = function() {
  return /** @type {proto.pb.Replacement.From.ValueCase} */(jspb.Message.computeOneofCase(this, proto.pb.Replacement.From.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Replacement.From.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Replacement.From.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Replacement.From} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Replacement.From.toObject = function(includeInstance, msg) {
  var f, obj = {
    missing: jspb.Message.getFieldWithDefault(msg, 1, false),
    datum: (f = msg.getDatum()) && proto.pb.TypedDatum.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Replacement.From}
 */
proto.pb.Replacement.From.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Replacement.From;
  return proto.pb.Replacement.From.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Replacement.From} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Replacement.From}
 */
proto.pb.Replacement.From.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMissing(value);
      break;
    case 2:
      var value = new proto.pb.TypedDatum;
      reader.readMessage(value,proto.pb.TypedDatum.deserializeBinaryFromReader);
      msg.setDatum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Replacement.From.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Replacement.From.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Replacement.From} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Replacement.From.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDatum();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.TypedDatum.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool missing = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.Replacement.From.prototype.getMissing = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.pb.Replacement.From.prototype.setMissing = function(value) {
  jspb.Message.setOneofField(this, 1, proto.pb.Replacement.From.oneofGroups_[0], value);
};


proto.pb.Replacement.From.prototype.clearMissing = function() {
  jspb.Message.setOneofField(this, 1, proto.pb.Replacement.From.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.Replacement.From.prototype.hasMissing = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TypedDatum datum = 2;
 * @return {?proto.pb.TypedDatum}
 */
proto.pb.Replacement.From.prototype.getDatum = function() {
  return /** @type{?proto.pb.TypedDatum} */ (
    jspb.Message.getWrapperField(this, proto.pb.TypedDatum, 2));
};


/** @param {?proto.pb.TypedDatum|undefined} value */
proto.pb.Replacement.From.prototype.setDatum = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.pb.Replacement.From.oneofGroups_[0], value);
};


proto.pb.Replacement.From.prototype.clearDatum = function() {
  this.setDatum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.Replacement.From.prototype.hasDatum = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Replacement.To = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pb.Replacement.To.oneofGroups_);
};
goog.inherits(proto.pb.Replacement.To, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.Replacement.To.displayName = 'proto.pb.Replacement.To';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pb.Replacement.To.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.pb.Replacement.To.ValueCase = {
  VALUE_NOT_SET: 0,
  FUNCTION: 3,
  DATUM: 4
};

/**
 * @return {proto.pb.Replacement.To.ValueCase}
 */
proto.pb.Replacement.To.prototype.getValueCase = function() {
  return /** @type {proto.pb.Replacement.To.ValueCase} */(jspb.Message.computeOneofCase(this, proto.pb.Replacement.To.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Replacement.To.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Replacement.To.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Replacement.To} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Replacement.To.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_function: jspb.Message.getFieldWithDefault(msg, 3, 0),
    datum: (f = msg.getDatum()) && proto.pb.TypedDatum.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Replacement.To}
 */
proto.pb.Replacement.To.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Replacement.To;
  return proto.pb.Replacement.To.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Replacement.To} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Replacement.To}
 */
proto.pb.Replacement.To.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!proto.pb.FunctionType} */ (reader.readEnum());
      msg.setFunction(value);
      break;
    case 4:
      var value = new proto.pb.TypedDatum;
      reader.readMessage(value,proto.pb.TypedDatum.deserializeBinaryFromReader);
      msg.setDatum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Replacement.To.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Replacement.To.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Replacement.To} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Replacement.To.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.pb.FunctionType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getDatum();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pb.TypedDatum.serializeBinaryToWriter
    );
  }
};


/**
 * optional FunctionType function = 3;
 * @return {!proto.pb.FunctionType}
 */
proto.pb.Replacement.To.prototype.getFunction = function() {
  return /** @type {!proto.pb.FunctionType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.pb.FunctionType} value */
proto.pb.Replacement.To.prototype.setFunction = function(value) {
  jspb.Message.setOneofField(this, 3, proto.pb.Replacement.To.oneofGroups_[0], value);
};


proto.pb.Replacement.To.prototype.clearFunction = function() {
  jspb.Message.setOneofField(this, 3, proto.pb.Replacement.To.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.Replacement.To.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TypedDatum datum = 4;
 * @return {?proto.pb.TypedDatum}
 */
proto.pb.Replacement.To.prototype.getDatum = function() {
  return /** @type{?proto.pb.TypedDatum} */ (
    jspb.Message.getWrapperField(this, proto.pb.TypedDatum, 4));
};


/** @param {?proto.pb.TypedDatum|undefined} value */
proto.pb.Replacement.To.prototype.setDatum = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.pb.Replacement.To.oneofGroups_[0], value);
};


proto.pb.Replacement.To.prototype.clearDatum = function() {
  this.setDatum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.Replacement.To.prototype.hasDatum = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional From from = 1;
 * @return {?proto.pb.Replacement.From}
 */
proto.pb.Replacement.prototype.getFrom = function() {
  return /** @type{?proto.pb.Replacement.From} */ (
    jspb.Message.getWrapperField(this, proto.pb.Replacement.From, 1));
};


/** @param {?proto.pb.Replacement.From|undefined} value */
proto.pb.Replacement.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.pb.Replacement.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.Replacement.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional To to = 2;
 * @return {?proto.pb.Replacement.To}
 */
proto.pb.Replacement.prototype.getTo = function() {
  return /** @type{?proto.pb.Replacement.To} */ (
    jspb.Message.getWrapperField(this, proto.pb.Replacement.To, 2));
};


/** @param {?proto.pb.Replacement.To|undefined} value */
proto.pb.Replacement.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.pb.Replacement.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.Replacement.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TypedDatum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pb.TypedDatum.oneofGroups_);
};
goog.inherits(proto.pb.TypedDatum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.TypedDatum.displayName = 'proto.pb.TypedDatum';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pb.TypedDatum.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.pb.TypedDatum.ValueCase = {
  VALUE_NOT_SET: 0,
  BOOLEAN: 2,
  FLOAT: 3,
  INTEGER: 4,
  STRING: 5
};

/**
 * @return {proto.pb.TypedDatum.ValueCase}
 */
proto.pb.TypedDatum.prototype.getValueCase = function() {
  return /** @type {proto.pb.TypedDatum.ValueCase} */(jspb.Message.computeOneofCase(this, proto.pb.TypedDatum.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TypedDatum.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TypedDatum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TypedDatum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TypedDatum.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pb_boolean: jspb.Message.getFieldWithDefault(msg, 2, false),
    pb_float: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    integer: jspb.Message.getFieldWithDefault(msg, 4, 0),
    string: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TypedDatum}
 */
proto.pb.TypedDatum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TypedDatum;
  return proto.pb.TypedDatum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TypedDatum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TypedDatum}
 */
proto.pb.TypedDatum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.DataType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolean(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFloat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInteger(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TypedDatum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TypedDatum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TypedDatum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TypedDatum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional DataType type = 1;
 * @return {!proto.pb.DataType}
 */
proto.pb.TypedDatum.prototype.getType = function() {
  return /** @type {!proto.pb.DataType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.pb.DataType} value */
proto.pb.TypedDatum.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool BOOLEAN = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.TypedDatum.prototype.getBoolean = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.pb.TypedDatum.prototype.setBoolean = function(value) {
  jspb.Message.setOneofField(this, 2, proto.pb.TypedDatum.oneofGroups_[0], value);
};


proto.pb.TypedDatum.prototype.clearBoolean = function() {
  jspb.Message.setOneofField(this, 2, proto.pb.TypedDatum.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.TypedDatum.prototype.hasBoolean = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double FLOAT = 3;
 * @return {number}
 */
proto.pb.TypedDatum.prototype.getFloat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.pb.TypedDatum.prototype.setFloat = function(value) {
  jspb.Message.setOneofField(this, 3, proto.pb.TypedDatum.oneofGroups_[0], value);
};


proto.pb.TypedDatum.prototype.clearFloat = function() {
  jspb.Message.setOneofField(this, 3, proto.pb.TypedDatum.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.TypedDatum.prototype.hasFloat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 INTEGER = 4;
 * @return {number}
 */
proto.pb.TypedDatum.prototype.getInteger = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.TypedDatum.prototype.setInteger = function(value) {
  jspb.Message.setOneofField(this, 4, proto.pb.TypedDatum.oneofGroups_[0], value);
};


proto.pb.TypedDatum.prototype.clearInteger = function() {
  jspb.Message.setOneofField(this, 4, proto.pb.TypedDatum.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.TypedDatum.prototype.hasInteger = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string STRING = 5;
 * @return {string}
 */
proto.pb.TypedDatum.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.pb.TypedDatum.prototype.setString = function(value) {
  jspb.Message.setOneofField(this, 5, proto.pb.TypedDatum.oneofGroups_[0], value);
};


proto.pb.TypedDatum.prototype.clearString = function() {
  jspb.Message.setOneofField(this, 5, proto.pb.TypedDatum.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.TypedDatum.prototype.hasString = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.pb);
